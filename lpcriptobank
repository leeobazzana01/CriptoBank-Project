#include <stdio.h>
#include <stdlib.h> //para usar malloc
#include <string.h>
#include <unistd.h> //para usar a funcao sleep e melhorar a experiência do usuário

//ESTRUTURAS DE DADOS
typedef struct personaldata{        //struct que irá armazenar os dados do usuário e também irá estruturar a fila que organizará os usuários
    char *name;                     //usará ponteiro para alocar memória dinãmicamente para a string          
    char *birthday;                //usará ponteiro para alocar memória dinãmicamente para a string
    int phone;                      //apenas uma variável inteira já é suficiente para armazenar os dados de telefone
    char *email;                    //usará ponteiro para alocar memória dinãmicamente para a string
    char *cpf;                      //é melhor usar um ponteiro para uma string que apenas uma variável inteira pois isso poderia causar problemas com 0 a esquerda
    char *userID;                   //usará ponteiro para alocar memória dinãmicamente para a string
    char *password;                 //usará ponteiro para alocar memória dinãmicamente para a string
    float income;                   //variável do tipo float é suficiente para armazenar a renda de algúem 
    float balance;                  //variável do tipo float armazena o saldo bancário de alguém 
    struct personaldata *next;      //variável do tipo struct personaldata com um ponteiro que irá apontar ao próximo nó da fila que armazena os usuários
} personaldata;

typedef struct criptocoin{          //struct que irá armazenar os dados de cadastro de uma criptomoeda
    char *criptoname;               //ponteiro que irá apontar para a string com o nome da criptomoeda     
    char abreviation[4];            //variável alocada fixamente para impedir o usuário de digitar o quando quiser, limitando a abreviação apenas a 3 caracteres  
    char *tecnologytype;            //ponteiro que irá apontar para a string que armazena o tipo de tecnologia da cripto em questão
    int availableunits;             //armazena a quantidade de unidades da moeda presentes no mercado
    float marketvalue;              //armazena o valor de mercado da criptomoeda  
}Criptocoin;

typedef struct node{                //struct do nó que irá organizar as criptomoedas em uma árvore binária baseado no valor de mercado das criptomoedas, de forma que o bitcoin seja sempre a raiz, por ser o mais valorizado em mercado
    Criptocoin *data;               //dados das cripto
    struct node *left;              //filho da esquerda
    struct node *right;             //filho da direita
}Node; 


//FUNÇÕES DO CÓDIGO QUE IRÃO MANIPULAR A LISTA QUE ORGANIZA OS USUÁRIOS
//função cria usuário do tipo personaldata (estrutura de dado dos usuários) e o ponteiro que aponta para os parâmetros (diversos dados do usuário)
personaldata *createuser(char *name, char *birthday, int phone, char *email, char *cpf, char *userID, char *password, float income, float balance); 
//função que adiciona usuário à lista encadeada, o ponteiro de ponteiro **head aponta para o primeiro usuário da lista, o ponteiro *createuser aponta para a função createuser
void adduser(personaldata **head, personaldata *createuser);
//função que irá realizar a busca do usuário usando um ponteiro que aponta para o primeiro usuário da fila, e depois um outro ponteiro que apontará para o cpf, o meio de busca
personaldata *searchuser(personaldata *head, char *cpf);
//função para remover o usuário, passando como parâmetro o **head que aponta para o primeiro usuário da fila, e o ponteiro *cpf para remover o usuário pelo cpf 
void removeuser(personaldata **head, char *cpf);
//função que irá listar todos os usuários da lista passando como parâmetro apenas o **head
void showusers(personaldata *head);
//função que irá fazer a leiberação de memória da lista por completo
void freememory(personaldata *head);

//FUNÇÕES DO CÓDIGO PARA MANIPULAR A ABB QUE ORGANIZA AS CRIPTOMOEDAS
//função responsável por criar um novo nó com uma criptomoeda
Node *createnode(Criptocoin *cripto);
//função para liberar a memória alocada para a árvore 
void freethree(Node *root);
//função que realiza a busca da moeda na árvore 
Criptocoin *search(Node *root, float value);
//função que cria uma nova criptomoeda e preenche os dados 
Criptocoin *createcripto(const char *name, const char *abreviation, const char *tecnologytype, int *availableunits, float value);
//função para exibir as moedas em ordem crescente de valor de mercado 
void inorder(Node *root);

int main(){    

return 0;
}

//ESCOPO DAS FUNÇÕES
//função que cria um novo usuário
personaldata *createuser(char *name, char *birthday, int phone, char *email, char *cpf, char *userID, char *password, float income, float balance) {
    //aloca memória para um novo usuário
    personaldata *newuser = (personaldata *)malloc(sizeof(personaldata)); 
    if (newuser == NULL) { //confere se o 
        return NULL;
    }

    //memória e copia o nome
    newuser->name = (char *)malloc(strlen(name) + 1);
    if (newuser->name == NULL) //se o nome inserido for nulo libera a memória alocada 
    {
        free(newuser);
        return NULL;
    }
    strcpy(newuser->name, name);

    //aloca e copia a data de aniversário
    newuser->birthday = (char *)malloc(strlen(birthday) + 1); 
    if (newuser->birthday == NULL) //se a data de aniversário inserida for nula, há liberação de memória alocada anteriormente
    {
        free(newuser->name);
        free(newuser);
        return NULL;
    }
    strcpy(newuser->birthday, birthday);  //se não for nula, ele copia a data de aniversário 

    //aloca e copia email
    newuser->email = (char *)malloc(strlen(email) + 1);
    if (newuser->email == NULL) //se o email inserido for nulo, liberamos a memória dos dados inseridos anteriormente  
    {
        free(newuser->birthday);
        free(newuser->name);
        free(newuser);
        return NULL;
    }
    strcpy(newuser->email, email);

    //aloca e copia CPF
    newuser->cpf = (char *)malloc(strlen(cpf) + 1);
    if (newuser->cpf == NULL) //se o cpf inserido for nulo, há liberação de memória dos daddos alocados anteriormente 
    {
        free(newuser->email);
        free(newuser->birthday);
        free(newuser->name);
        free(newuser);
        return NULL;
    }
    strcpy(newuser->cpf, cpf);

    //aloca e copia o id de usuário
    newuser->userID = (char *)malloc(strlen(userID) + 1);
    if (newuser->userID == NULL)  //se o id se usuário for nulo, há liberação da memória anteriormente alocada 
    {
        free(newuser->cpf);
        free(newuser->email);
        free(newuser->birthday);
        free(newuser->name);
        free(newuser);
        return NULL;
    }
    strcpy(newuser->userID, userID);

    //aloca e copia a senha
    newuser->password = (char *)malloc(strlen(password) + 1);
    if (newuser->password == NULL)  //se a senha inserida for nula, há liberação da memória anteriormente alocada 
    {
        free(newuser->userID);
        free(newuser->cpf);
        free(newuser->email);
        free(newuser->birthday);
        free(newuser->name);
        free(newuser);
        return NULL;
    }
    strcpy(newuser->password, password);

    //atribui valores inteiros e floats diretamente
    newuser->phone = phone;
    newuser->income = income;
    newuser->balance = balance;

    //inicializa o ponteiro next como NULL para garantir o funcionamento da lista encadeada
    newuser->next = NULL;

    //retorna os dados do novo usuário criado
    return newuser;
}

void adduser(personaldata **head, personaldata *createuser)
{
    if(head == NULL || createuser == NULL) //condição que verifica se os ponteiros head e create user são válidos
    {
        return;
    }
    if(*head == NULL)                   //verifica se a lista está vazia(ou seja, o head==null)
    {
        *head = createuser;             //se estiver vaziao o novo usuário criado passa a ser o nó head
        return;
    }
    personaldata *current = *head;     //caso a lista não steja vazia, percorre o final da lista no até o último nó e adiciona um novo nó(usuário)
    while(current->next != NULL)
    {
        current=current->next;       //move o ponteiro current para o nó final da lista
    }
    current->next=createuser;       //o novo usuário é adicionado ao final da filha
}

//função que percorre a lista e procura o usuário
personaldata *searchuser(personaldata *head, char *cpf) {
    // ponteiro que percorre a lista
    personaldata *current = head;

    //percorre até encontrar o usuário ou chegar ao final
    while (current != NULL) {
        //compara o CPF do nó com o CPF inserido
        if (strcmp(current->cpf, cpf) == 0) {  //se o cpf for encontrato
            return current;  //retorna um ponteiro para o usuário encontrado
        }
        current = current->next;  //move para o próximo nó
    }

    //caso não haja usuário com tal cpf, retorna NULL
    return NULL;
}

//função que remove nós da lista pelo cpf 
void removeuser(personaldata **head, char *cpf) {
    //ponteiros para percorrer a lista e realizar a exclusão
    personaldata *current = *head;
    personaldata *previous = NULL;

    //percorre a lista
    while (current != NULL) {
        //verifica se o CPF do usuário atual é o CPF procurado
        if (strcmp(current->cpf, cpf) == 0) {
            //caso seja o primeiro nó a ser removido
            if (previous == NULL) {
                *head = current->next; //atualiza o head
            } else {
                previous->next = current->next;//exclui o nó atual
            }

            //liberação da memória do nó removido
            free(current->name);
            free(current->birthday);
            free(current->email);
            free(current->cpf);
            free(current->userID);
            free(current->password);
            free(current);

            printf("User removed with sucess\n");   //imprime mensagme de sucesso ao remover o usuário
            return;
        }

        //atualiza os ponteiros e continua percorrendo a lista
        previous = current;
        current = current->next;
    }

    // Se não encontrar o usuário com o CPF fornecido
    printf("User with the %s does not exist\n", cpf);
}

//função que percorre a lista e mostra informações de todos usuários 
void showusers(personaldata *head) {
    if (head == NULL) { //confere se a lista é vazia
        printf("No users found in the list.\n");
        return;
    }

    personaldata *current = head; //ponteiro que percorre a lista
    printf("Displaying all registered users:\n\n");
    
    while (current != NULL) {
        printf("Name: %s\n", current->name);
        printf("Birthday: %s\n", current->birthday);
        printf("Phone: %d\n", current->phone);
        printf("Email: %s\n", current->email);
        printf("CPF: %s\n", current->cpf);
        printf("User ID: %s\n", current->userID);
        printf("Password: %s\n", current->password);
        printf("Income: $%.2f\n", current->income);
        printf("Balance: $%.2f\n", current->balance);
        printf("---------------------------\n");
        
        current = current->next; //move até o próximo usuário na lista
    }
}
void freememory(personaldata *head){
    personaldata *current = head;
    while (current != NULL) {
        personaldata *temp = current;
        current = current->next;
        
        //liberação de memoria para os campos 
        free(temp->name);
        free(temp->birthday);
        free(temp->email);
        free(temp->cpf);
        free(temp->userID);
        free(temp->password);
        
        //liberação do próprio nó
        free(temp);
    }
}


//FUNÇÕES QUE MANIPULAM A ÁRVORE NA ORGANIZAÇÃO DAS CRIPTOMOEDAS
//cria um novo nó com uma criptomoeda
Node* createNode(Criptocoin *crypto) {
    Node *newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->data = crypto;
    newNode->left = newNode->right = NULL;
    return newNode;
}

//insere uma moeda na árvore binaria de busca com base no valor de mercado
void insert(Node **root, Criptocoin *crypto) {
    if (*root == NULL) {
        *root = createNode(crypto);
        return;
    }
    //compara pelo valor de mercado das criptomoedas 
    if (crypto->marketvalue > (*root)->data->marketvalue) {
        insert(&(*root)->right, crypto); //insere a direita
    } else {
        insert(&(*root)->left, crypto);  //insere a esquerda
    }
}

//busca uma criptomoeda na árvore binaria 
Criptocoin* search(Node *root, float value) {
    if (root == NULL) {
        return NULL;  
    }
    if (value == root->data->marketvalue) {
        return root->data;  // Encontrado
    } else if (value > root->data->marketvalue) {
        return search(root->right, value);  //busca a direita por valores maiores que a raíz
    } else {
        return search(root->left, value);  //busca a esquerda por valores menores que a raíz
    }
}

//exibie as criptomoedas com base no valor de mercado
void inorder(Node *root) {
    if (root != NULL) {
        inorder(root->left);  // Visitar a subárvore esquerda
        printf("Cryptocurrency Name: %s\n", root->data->criptoname);
        printf("Abbreviation: %s\n", root->data->abreviation);
        printf("Technology: %s\n", root->data->tecnologytype);
        printf("Available Units: %d\n", root->data->availableunits);
        printf("Market Value: %.2f\n", root->data->marketvalue);
        printf("---------------------------\n");
        inorder(root->right);  //aponta para a subárvore direita
    }
}

//libera a memória de uma árvore
void freeTree(Node *root) {
    if (root != NULL) {
        freeTree(root->left);
        freeTree(root->right);
        free(root->data->criptoname);  //libera o nome
        free(root->data->tecnologytype);  //libera o tipo de tecnologia
        free(root->data);  //libera a struct Criptocoin
        free(root);  //liberaa o nó
    }
}

//cria e preenche uma criptomoeda
Criptocoin* createCriptocoin(const char *name, const char *abbreviation, const char *techType, int units, float value) {
    Criptocoin *crypto = (Criptocoin*)malloc(sizeof(Criptocoin));
    if (crypto == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    crypto->criptoname = strdup(name);  //aloca memória e copia o nome
    strncpy(crypto->abreviation, abbreviation, 3);
    crypto->abreviation[3] = '\0';  //garante que a abreviação tem no máximo 3 caracteres
    crypto->tecnologytype = strdup(techType);  //aloca memória e copia o tipo de tecnologia
    crypto->availableunits = units;
    crypto->marketvalue = value;
    return crypto;
}
